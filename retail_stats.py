# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1y4H2QQQGhwIhUhnZ2bxa_AAl1lgvxh2B
"""

import warnings
warnings.filterwarnings('ignore')
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sn

df=pd.read_csv("/content/Online-Retail.csv")

df.describe()

df.info()

df.shape

df.dtypes

df.isnull().any()

df.isnull().sum()

rows_with_null = df[df.isnull().any(axis=1)]

# Get the row numbers
row_numbers_with_null = rows_with_null.index.tolist()

# Display the row numbers
print("Row numbers with null values:", row_numbers_with_null)

df = df.dropna()

df.isnull().any()

neg = df[df['Quantity']<0]
count = len(neg)
print(count)

df = df[df['Quantity']>0]

neg = df[df['Quantity']<0]
count = len(neg)
print(count)

neg = df[df['CustomerID']<0]
count = len(neg)
print(count)

neg = df[df['UnitPrice']<0]
count = len(neg)
print(count)

df = df[df['UnitPrice']>0]

df['InvoiceDate'] = pd.to_datetime(df['InvoiceDate'])

df.sample()

df['Date'] = df['InvoiceDate'].dt.date
df['Time'] = df['InvoiceDate'].dt.time

df.info()

#df.drop('InvoiceDate' , axis=1,inplace=True)
#df.drop('date_column' , axis=1,inplace=True)
#df.drop('time_column' , axis=1,inplace=True)

df.head()

df['Country'].unique()

country_frequency = df['Country'].value_counts()

# Find the country with the maximum frequency
max_frequency_country = country_frequency.idxmax()

# Display the country with the maximum frequency
print(f'Country with the maximum frequency: %s - %d '% (max_frequency_country,country_frequency[country_frequency.idxmax()]))

plt.figure(figsize=(10, 6))
plt.pie(country_frequency, labels=country_frequency.index, autopct='%1.1f%%', startangle=140)
plt.title('Country Distribution')
plt.show()

plt.figure(figsize=(12, 6))
country_frequency.plot(kind='bar', color='skyblue')
plt.title('Country Distribution')
plt.xlabel('Country')
plt.ylabel('Frequency')
plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for better readability
plt.show()

plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)  # 1 row, 2 columns, 1st subplot
plt.pie(country_frequency, labels=country_frequency.index, autopct='%1.1f%%', startangle=140)
plt.title('Country Distribution')

# Create a table
plt.subplot(1, 2, 2)  # 1 row, 2 columns, 2nd subplot
table_data = pd.DataFrame({'Country': country_frequency.index, 'Frequency': country_frequency.values})
table = plt.table(cellText=table_data.values, colLabels=table_data.columns, cellLoc='center', loc='center')
table.auto_set_font_size(False)
table.set_fontsize(10)
table.scale(1.2, 1.2)
plt.axis('off')

plt.show()

# Assuming "customerid" and "country" are the names of the columns
most_frequent_customers = df.groupby('Country')['CustomerID'].value_counts().groupby('Country').idxmax()

# Display the most frequent customers in each country
print(most_frequent_customers)

df['Time'] = df['Time'].astype(str)

# Convert 'Date' to a string
df['Date'] = df['Date'].astype(str)

# Combine 'Date' and 'Time' into a new datetime column
df['DateTime'] = pd.to_datetime(df['Date'] + ' ' + df['Time'])

# Create one-hour time ranges
time_ranges = pd.cut(df['DateTime'].dt.hour, bins=range(0, 25), include_lowest=True)

# Count the frequency of each time range
time_frequency = time_ranges.value_counts().sort_index()

# Display the frequency of time in one-hour time ranges
print(time_frequency)

# Create a bar graph
plt.figure(figsize=(12, 6))
time_frequency.plot(kind='bar', color='skyblue')
plt.title('Time Distribution')
plt.xlabel('Time Range')
plt.ylabel('Frequency')
plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for better readability
plt.show()

df['Date'] = pd.to_datetime(df['Date'])  # Convert 'Date' to datetime format
df['Year'] = df['Date'].dt.year  # Extract the year from the 'Date' column

# Calculate sales for each year
yearly_sales = df.groupby('Year')['CustomerID'].sum()

# Create a bar graph
plt.figure(figsize=(12, 6))
yearly_sales.plot(kind='bar', color='skyblue')
plt.title('Yearly Sales')
plt.xlabel('Year')
plt.ylabel('Total Sales')
plt.show()

df['Date'] = pd.to_datetime(df['Date'])  # Convert 'Date' to datetime format
df['Year'] = df['Date'].dt.year  # Extract the year from the 'Date' column

# Count the number of transactions for each year
yearly_transaction_count = df.groupby('Year').size()

# Create a bar graph
plt.figure(figsize=(12, 6))
yearly_transaction_count.plot(kind='bar', color='skyblue')
plt.title('Yearly Transaction Count')
plt.xlabel('Year')
plt.ylabel('Transaction Count')
plt.show()

# Assuming 'Product' is the name of the column containing product names
# and 'Quantity' is the name of the column containing quantities
product_frequency = df.groupby('Description')['Quantity'].sum()

# Create a bar graph
plt.figure(figsize=(12, 6))
product_frequency.sort_values(ascending=False).plot(kind='bar', color='skyblue')
plt.title('Product Frequency with Quantity')
plt.xlabel('Product')
plt.ylabel('Total Quantity')
plt.show()

# Assuming 'Product' is the name of the column containing product names
# and 'Quantity' is the name of the column containing quantities
product_frequency = df.groupby('Description')['Quantity'].sum()

# Find the product with the maximum frequency
max_product = product_frequency.idxmax()
max_frequency = product_frequency.max()

# Display the product with the maximum frequency and its total quantity
print(f"The product with the maximum frequency is '{max_product}' with a total quantity of {max_frequency}.")

print(max_product)